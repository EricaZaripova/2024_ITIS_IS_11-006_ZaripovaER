Википедия
Материал из Википедии свободной энциклопедии
Перейти к навигации
Перейти к поиску
У этого термина существуют и другие значения см значения
Класс языка
объектно ориентированный язык программирования
Появился в
февраля
Автор
Гвидо ван Россум
Разработчик
и Гвидо ван Россум
Выпуск
февраля
Испытал влияние
Алгол Клу Лисп Модула
Повлиял на
Лицензия
Сайт
англ
ОС
кроссплатформенность
Медиафайлы на Викискладе
МФА в русском языке встречаются названия пито н или па йтон высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью ориентированный на повышение производительности разработчика читаемости кода и его качества а также на обеспечение переносимости написанных на нём программ Язык является полностью объектно ориентированным в том плане что всё является объектами Необычной особенностью языка является выделение блоков кода отступами Синтаксис ядра языка минималистичен за счёт чего на практике редко возникает необходимость обращаться к документации Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом написанным на компилируемых языках таких как или
является мультипарадигменным языком программирования поддерживающим императивное процедурное структурное объектно ориентированное программирование метапрограммирование функциональное программирование и асинхронное программирование Задачи обобщённого программирования решаются за счёт динамической типизации Аспектно ориентированное программирование частично поддерживается через декораторы более полноценная поддержка обеспечивается дополнительными фреймворками Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений Основные архитектурные черты динамическая типизация автоматическое управление памятью полная интроспекция механизм обработки исключений поддержка многопоточных вычислений с глобальной блокировкой интерпретатора высокоуровневые структуры данных Поддерживается разбиение программ на модули которые в свою очередь могут объединяться в пакеты
Эталонной реализацией является интерпретатор который поддерживает большинство активно используемых платформ являющийся стандартом де факто языка Он распространяется под свободной лицензией позволяющей использовать его без ограничений в любых приложениях включая проприетарные компилирует исходные тексты в высокоуровневый байт код который исполняется в стековой виртуальной машине К другим трём основным реализациям языка относятся для для и написан на подмножестве языка и разрабатывался как альтернатива с целью повышения скорости исполнения программ в том числе за счёт использования компиляции Поддержка версии закончилась в году На текущий момент активно развивается версия языка Разработка языка ведётся через предложения по расширению языка англ в которых описываются нововведения делаются корректировки согласно обратной связи от сообщества и документируются итоговые решения
Стандартная библиотека включает большой набор полезных переносимых функций начиная с возможностей для работы с текстом и заканчивая средствами для написания сетевых приложений Дополнительные возможности такие как математическое моделирование работа с оборудованием написание веб приложений или разработка игр могут реализовываться посредством обширного количества сторонних библиотек а также интеграцией библиотек написанных на Си или при этом и сам интерпретатор может интегрироваться в проекты написанные на этих языках Существует и специализированный репозиторий программного обеспечения написанного на Данный репозиторий предоставляет средства для простой установки пакетов в операционную систему и стал стандартом де факто для По состоянию на год в нём содержалось более тысяч пакетов
стал одним из самых популярных языков он используется в анализе данных машинном обучении и веб разработке а также в других сферах включая разработку игр За счёт читабельности простого синтаксиса и отсутствия необходимости в компиляции язык хорошо подходит для обучения программированию позволяя концентрироваться на изучении алгоритмов концептов и парадигм Отладка же и экспериментирование в значительной степени облегчаются тем фактом что язык является интерпретируемым Применяется язык многими крупными компаниями такими как или
Содержание
История
Концепция и философия
Портируемость
Типы и структуры данных
Синтаксис и семантика
Операторы
Система отступов
Выражения
Имена
Строки документации
Парадигмы программирования
Объектно ориентированное программирование
Обобщённое программирование
Функциональное программирование
Метапрограммирование
Асинхронное программирование
Возможности
Модули и пакеты
Интроспекция
Обработка исключений
Итераторы
Генераторы
Управление контекстом выполнения
Декораторы
Регулярные выражения
Стандартная библиотека
Сторонние библиотеки
Примеры программ
Профилирование и оптимизация кода
Сравнение с другими языками
и
и
Языки на которые повлиял
Критика
Низкое быстродействие
Глобальная блокировка интерпретатора
Синтаксис и семантика
Невозможность модификации встроенных классов
Реализации
Другие реализации
Специализированные подмножества расширения
Инструменты поддержки программирования
Интерактивный режим
Применение
Примечания
Комментарии
Источники
Литература
Ссылки
История
Основная статья История языка программирования
Логотип использовавшийся с х до года
Гвидо ван Россум в году на в Портленде штат Орегон
Задумка по реализации языка появилась в конце х годов а разработка его реализации началась в году сотрудником голландского института Гвидо ван Россумом Для распределённой операционной системы требовался расширяемый скриптовый язык и Гвидо начал разрабатывать на досуге позаимствовав некоторые наработки для языка Гвидо участвовал в разработке этого языка ориентированного на обучение программированию В феврале года Гвидо опубликовал исходный текст в группе новостей С самого начала проектировался как объектно ориентированный язык
Гвидо ван Россум назвал язык в честь популярного британского комедийного телешоу х Летающий цирк Монти Пайтона поскольку автор был поклонником этого телешоу как и многие другие разработчики того времени а в самом шоу прослеживалась некая параллель с миром компьютерной техники
Наличие дружелюбного отзывчивого сообщества пользователей считается наряду с дизайнерской интуицией Гвидо одним из факторов успеха Развитие языка происходит согласно чётко регламентированному процессу создания обсуждения отбора и реализации документов англ предложений по развитию
декабря года после длительного тестирования вышла первая версия или также используется сокращение В устранены многие недостатки архитектуры с максимально возможным но не полным сохранением совместимости со старыми версиями
Дата окончания срока поддержки первоначально была установлена на год а затем перенесена на год из опасения что большая часть существующего кода не может быть легко перенесена на Поддержка была направлена лишь на уже существующие проекты новые проекты должны были использовать Официально не поддерживается с января года хотя последнее обновление вышло в апреле Больше никаких исправлений безопасности или других улучшений для не будет выпущено С окончанием срока службы поддерживаются только и более поздние версии
Концепция и философия
Основная статья Дзен Пайтона
Пиктограмма для файлов
Язык использует динамическую типизацию вместе с подсчётом ссылок и циклический сборщик мусора для менеджмента памяти Также есть динамические разрешения имён динамическое связывание которые связывают имена методов и переменных во время выполнения программы
предлагает поддержку функционального программирования в традициях Лиспа Так в есть функции и Начиная с находится в библиотеке также из Лиспа были заимствованы понятия характеристик списков ассоциативных массивов словарей множеств и генераторов списков Стандартная библиотека содержит два модуля и реализующие инструменты заимствованные из и
Разработчики языка придерживаются определённой философии программирования называемой Дзен Пито на или Дзен Па йтона Её текст выдаётся интерпретатором по команде работает один раз за сессию Автором этой философии считается Тим Петерс
Философия начинается так
Красивое лучше чем уродливое
Явное лучше чем неявное
Простое лучше чем сложное
Сложное лучше чем запутанное
Оригинальный текст англ
Вместо того чтобы встроить в ядро всю функциональность языка он был спроектирован таким образом чтобы быть легко расширяемым Это сделало язык популярным средством добавления программируемых интерфейсов к существующим приложениям Видение Гвидо ван Россума маленького ядра с большой стандартной библиотекой и легко расширяемым интерпретатором проистекало из негативного опыта разработки языка который придерживался противоположного подхода
стремится к более простому менее громоздкому синтаксису и грамматике предоставляя разработчикам выбор в их методологии кодирования В отличие от девиза есть несколько способов сделать это придерживается философии должен существовать один и желательно только один очевидный способ сделать это Алекс Мартелли член и автор книг по пишет что Описывать что то как умное не считается комплиментом в культуре
Разработчики стремятся избежать преждевременной оптимизации и отвергают патчи к некритическим частям эталонной реализации которые могли бы предложить незначительное увеличение скорости за счёт понятности кода Однако есть способы повышения производительности Если в программе есть узкие места связанные с выполнением ресурсоёмких операций на центральном процессоре но не связанные с использованием операций ввода вывода то повысить производительность возможно за счёт трансляции программы при помощи в язык Си и последующей компиляции Требовательные к вычислительным ресурсам части программы также можно переписывать на язык Си и подключать как отдельные библиотеки с привязками к
Важная цель разработчиков делать его забавным для использования Это было отражено в названии языка данном в честь Монти Пайтона Также это отражено в иногда игривом подходе к обучающим программам и справочным материалам таким как примеры программ из документаций которые используют названия и вместо использующихся в документации множества других языков и
Портируемость
портирован и работает почти на всех известных платформах от КПК до мейнфреймов Существуют порты под практически под все варианты включая и и и выше и
По мере устаревания платформы её поддержка в основной ветви языка прекращается Например с версии прекращена поддержка и В версии перестала поддерживаться В версии перестала поддерживаться и
При этом в отличие от многих портируемых систем для всех основных платформ имеет поддержку характерных для данной платформы технологий например Более того существует специальная версия для виртуальной машины что позволяет интерпретатору выполняться на любой системе поддерживающей при этом классы могут непосредственно использоваться из и даже быть написанными на Также несколько проектов обеспечивают интеграцию с платформой основные из которых и
Типы и структуры данных
поддерживает динамическую типизацию то есть тип переменной определяется только во время исполнения Поэтому вместо присваивания значения переменной лучше говорить о связывании значения с некоторым именем Также поддерживает подсказки типов с помощью аннотаций добавляющие поддержку последовательной типизации и позволяющие использовать статический анализ кода Подсказки типов не используются во время компиляции и исполнения кода непосредственно но могут использоваться некоторыми библиотеками например К примитивным типам в относятся булевый целое число произвольной длины число с плавающей запятой и комплексное число Из контейнерных типов в встроены строка список кортеж словарь и множество Все значения являются объектами в том числе функции методы модули классы
Добавить новый тип можно либо написав класс либо определив новый тип в модуле расширения например написанном на языке Система классов поддерживает наследование одиночное и множественное и метапрограммирование Возможно наследование от большинства встроенных типов и типов расширений
Типы используемые в
Тип
Изменяемость
Описание
Примеры
Неизменяемый
Логический тип
Изменяемый
Массив байтов
Неизменяемый
Массив байтов
Неизменяемый
Комплексное число
Изменяемый
Словарь ассоциативный массив представляет собой коллекцию пар ключ значение значение может быть любого типа ключ должен иметь хешируемый тип
Неизменяемый
Многоточие эллипсис Используется в основном в для сокращённого задания среза многомерного массива В самом присутствует для поддержки пользовательских типов и таких расширений как
что
Неизменяемый
Число с плавающей запятой Степень точности зависит от платформы но на практике обычно реализуется в виде битного разрядного числа
Неизменяемый
Неупорядочное множество не содержит дубликатов может содержать внутри себя различные хешируемые типы данных
Неизменяемый
Целое число неограниченного размера
Изменяемый
Список может содержать внутри себя различные типы данных
К
Неизменяемый
Объект представляющий собой отсутствие значения часто называемый в других языках
К
Неизменяемый
Объект который возвращается при перегрузке операторов когда типы операндов не поддерживаются
Неизменяемый
Последовательность целых чисел от какого то одного значения до другого обычно используется для повторения операции несколько раз при помощи
Изменяемый
Неупорядочное множество не содержит дубликатов может содержать внутри себя различные хешируемые типы данных
Неизменяемый
Строковый тип
Неизменяемый
Кортеж Может содержать внутри себя различные типы данных Может использоваться в качестве неизменяемого списка и в качестве записей с неименованными полями
В качестве неизменяемого списка В качестве записей
Синтаксис и семантика
Основная статья Синтаксис и семантика
Операторы
Набор операторов достаточно традиционен
Условный оператор если При наличии нескольких условий и альтернатив применяется необязательный блок сокращение от который может повторяться в коде неограниченное число раз Если ни одно из условий не было соблюдено то выполняется необязательный блок иначе
Оператор цикла
Оператор итерации
Операторы обработки исключений
Оператор определения класса
Оператор определения функции метода или генератора Внутри возможно применение возврат для возврата из функции или метода а в случае генератора давать
Оператор сопоставления с образцом начиная с
Операторы вызова исключений и
Оператор ничего не делает Используется для пустых блоков кода
Система отступов
Одной из интересных синтаксических особенностей языка является выделение блоков кода с помощью отступов пробелов или табуляций поэтому в отсутствуют операторные скобки как в языке Паскаль или фигурные скобки как в Си Такой трюк позволяет сократить количество строк и символов в программе и приучает к хорошему стилю программирования С другой стороны поведение и даже корректность программы может зависеть от начальных пробелов в тексте Тем кто привык программировать на языках с явным выделением начала и конца блоков такое поведение поначалу может показаться неинтуитивным и неудобным
Сам Гвидо писал
Наверное самой спорной особенностью является использование отступов для группировки операторов что взято непосредственно из Это одна из особенностей языка которая дорога моему сердцу Это делает код более читабельным двумя способами Во первых использование отступов уменьшает визуальное нагромождение и делает программы короче тем самым сокращая объём внимания необходимого для восприятия базовой единицы кода Во вторых это даёт программисту меньше свободы в форматировании тем самым делая возможным более единообразный стиль что облегчает чтение чужого кода Сравните например три или четыре различных соглашения о размещении фигурных скобок в Си каждое из которых имеет сильных сторонников
Оригинальный текст англ
Выражения
Состав синтаксис ассоциативность и приоритет операций достаточно привычны для языков программирования и призваны минимизировать употребление скобок Если сравнивать с математикой то приоритеты операторов зеркалируют соответствующие в математике при этом оператор присвоения значения соответствует типографскому Хотя приоритеты операций позволяют не использовать скобки во многих случаях на анализ больших выражений может тратиться лишнее время в результате чего в таких случаях выгоднее явно расставлять скобки
Отдельно стоит упомянуть операцию форматирования для строк работает по аналогии с функцией из Си которая использует тот же символ что и взятие остатка от деления
В версии были добавлены форматированные строковые литералы или строки которые делают код более читаемым и лаконичным
вывод с использованием строки
имеет удобные цепочечные сравнения
Кроме того логические операции и являются ленивыми если для вычисления значения операции достаточно первого операнда этот операнд и является результатом в противном случае вычисляется второй операнд логической операции Это основывается на свойствах алгебры логики например если один аргумент операции ИЛИ является истиной то и результат этой операции всегда является истиной В случае если второй операнд является сложным выражением это позволяет сократить издержки на его вычисление Этот факт широко использовался до версии вместо условной конструкции
меньше больше или равно
Встроенные типы данных как правило имеют особый синтаксис для своих литералов записанных в исходном коде констант
строка и Юникод строка одновременно
строка и Юникод строка одновременно
тоже строка и Юникод строка одновременно
булевы литералы
число с плавающей запятой
числа в двоичной восьмеричной и шестнадцатеричной системах счисления
комплексное число
список
кортеж
словарь
множество
анонимная функция
генератор
Для списков и других последовательностей предлагает набор операций над срезами Особенностью является индексация которая может показаться новичку странной но раскрывает свою согласованность по мере использования Индексы элементов списка начинаются с нуля Запись среза означает что в срез попадают все элементы от включительно до не включая При этом индекс можно не указывать Например запись означает что в срез попадают все элементы с самого начала запись означает что попадают все элементы до конца среза запись означает что попадают все элементы с начала и до конца
Имена
Имя идентификатор может начинаться с буквы любого алфавита в Юникоде любого регистра или подчёркивания после чего в имени можно использовать и цифры В качестве имени нельзя использовать ключевые слова их список можно узнать по и нежелательно переопределять встроенные имена Имена начинающиеся с символа подчёркивания имеют специальное значение
В каждой точке программы интерпретатор имеет доступ к трём пространствам имён то есть отображениям имён в объекты локальному глобальному и встроенному
Области видимости имён могут быть вложенными друг в друга внутри определяемой функции видны имена из окружающего блока кода На практике с областями видимости и связыванием имён связано несколько правил хорошего тона о которых можно подробнее узнать из документации
Строки документации
предлагает механизм документирования кода В начало каждого модуля класса функции вставляется строка документации Строки документации остаются в коде на момент времени исполнения и в язык встроен доступ к документации переменная что используется современными Интегрированная среда разработки например
В интерактивном режиме можно получить помощь сгенерировать гипертекстовую документацию по целому модулю или даже применить для автоматического тестирования модуля
Парадигмы программирования
мультипарадигменный язык программирования Полностью поддерживаются объектно ориентированное структурное обобщённое функциональное программирование и метапрограммирование Базовая поддержка аспектно ориентированного программирования реализуется за счёт метапрограммирования Множество других методик в том числе контрактное и логическое программирование можно реализовать с помощью расширений
Объектно ориентированное программирование
Дизайн языка построен вокруг объектно ориентированной модели программирования Реализация ООП в является хорошо продуманной но вместе с тем достаточно специфической по сравнению с другими объектно ориентированными языками В языке всё является объектами либо экземплярами классов либо экземплярами метаклассов Исключением является базовый встроенный метакласс Таким образом классы на самом деле являются экземплярами метаклассов а производные метаклассы являются экземплярами метакласса Метаклассы являются частью концепции метапрограммирования и предоставляют возможность управления наследованием классов что позволяет создавать абстрактные классы регистрировать классы или добавлять в них какой либо программный интерфейс в рамках библиотеки или фреймворка
Классы по своей сути представляют план или описание того как создать объект и хранят в себе описание атрибутов объекта и методов для работы с ним Парадигма ООП основывается на инкапсуляции наследовании и полиморфизме Инкапсуляция в представлена возможностью хранения публичных и скрытых атрибутов полей в объекте с предоставлением методов для работы с ними при этом на самом деле все атрибуты являются публичными но для пометки скрытых атрибутов существует соглашение об именовании Наследование позволяет создавать производные объекты без необходимости повторного написания кода а полиморфизм заключается в возможности переопределения любых методов объекта в все методы являются виртуальными а также в перегрузке методов и операторов Перегрузка методов в реализуется за счёт возможности вызова одного и того же метода с разным набором аргументов Особенностью является возможность модифицировать классы после их объявления добавляя в них новые атрибуты и методы также можно модифицировать и сами объекты в результате чего классы могут использоваться как структуры для хранения произвольных данных
В поддерживается множественное наследование Само по себе множественное наследование является сложным и его реализации сталкиваются с проблемами разрешения коллизий имён между родительскими классами и с возможным повторным наследованием от одного и того же класса в иерархии В методы вызываются согласно порядку разрешения методов который основан на алгоритме линеаризации в обычных случаях при написании программ не требуется знать принцип работы данного алгоритма понимание же может потребоваться при создании нетривиальных иерархий классов
Возможности и особенности специфичные для
Специальные методы управляющие жизненным циклом объекта конструкторы деструкторы
Перегрузка операторов всех кроме и символьных логических
Свойства имитация поля с помощью функций
Управление доступом к полям эмуляция полей и методов частичный доступ и т п
Методы для управления наиболее распространёнными операциями истинностное значение глубокое копирование сериализация итерация по объекту
Полная интроспекция
Классовые и статические методы классовые поля
Классы вложенные в функции и классы
Возможность модифицировать объекты во время исполнения программы
Обобщённое программирование
Языки с поддержкой динамической типизации и объектно ориентированного программирования обычно не рассматриваются в рамках обобщённого программирования поскольку задачи обобщённого программирования решаются за счёт отсутствия ограничений на типы данных В обобщённое программирование со строгой типизацией достигается использованием средств языка совместно со внешними анализаторами кода такими как
Функциональное программирование
Несмотря на то что изначально не задумывался как язык функционального программирования он поддерживает функциональный стиль программирования в частности
функция является объектом первого класса
функции высших порядков
рекурсия
фокус на работу со списками
аналог замыканий
частичное применение функции с помощью метода
возможность реализации других средств на самом языке например карринг
Однако в отличие от большинства языков непосредственно ориентированных на функциональное программирование не является чистым языком программирования и код не защищён от побочных эффектов
В стандартной библиотеке существуют специальные пакеты и для функционального программирования
Метапрограммирование
Этот раздел статьи ещё не написан Здесь может располагаться отдельный раздел Помогите Википедии написав его февраля
поддерживает метапрограммирование
Асинхронное программирование
Этот раздел не завершён Вы поможете проекту исправив и дополнив его следующей информацией Асинхронное программирование на
начиная с стал поддерживать асинхронное программирование Появились операторы и а также библиотека
является атрибутом который создает асинхронную функцию
позволяет выполнять асинхронные генераторы
Возможности
Модули и пакеты
Программное обеспечение приложение или библиотека на оформляется в виде модулей которые в свою очередь могут быть собраны в пакеты Модули могут располагаться как в каталогах так и в архивах Модули могут быть двух типов по своему происхождению модули написанные на чистом и модули расширения написанные на других языках программирования Например в стандартной библиотеке есть чистый модуль и его аналог на Си Модуль оформляется в виде отдельного файла а пакет в виде отдельного каталога Подключение модуля к программе осуществляется оператором После импорта модуль представлен отдельным объектом дающим доступ к пространству имён модуля В ходе выполнения программы модуль можно перезагрузить функцией
Интроспекция
поддерживает полную интроспекцию времени исполнения Это означает что для любого объекта можно получить всю информацию о его внутренней структуре
Применение интроспекции является важной частью того что называют и широко применяется в библиотеках и фреймворках таких как и др значительно экономя время использующего их программиста
Необходимые для интроспекции данные хранятся в специальных атрибутах Так например получить все пользовательские атрибуты большинства объектов можно из специального атрибута словаря или другого объекта предоставляющего интерфейс
т к классы тоже являются экземплярами объекта
то и они поддерживают этот тип интроспекции
Есть также другие атрибуты имена и назначение которых зависят от объекта
получение байтокода функции
специальный атрибут ссылка на класс данного объекта
Подавляющее большинство атрибутов поддерживающих интроспекцию является классовым и их в свою очередь можно получить из Часть информации унаследованную от базового класса все объекты используют совместно что позволяет экономить память
Для удобства получения интроспективной информации в есть модуль
С помощью модуля возможен обратный процесс построения объекта из составных частей на этапе исполнения
Обработка исключений
Обработка исключений поддерживается в посредством операторов образующих блок обработки исключения В общем случае блок выглядит следующим образом
Здесь код который может вызвать исключение
это один из стандартных типов исключения всего лишь класс
может использоваться любой другой в том числе свой
Тип Тип Переменная
Код в блоке выполняется если тип исключения совпадает с одним из типов
Тип Тип или является наследником одного
из этих типов
Полученное исключение доступно в необязательной Переменной
Тип Тип Переменная
Количество блоков не ограничено
Сгенерировать исключение поверх полученного без параметров повторно сгенерировать полученное
Будет выполнено при любом исключении не обработанном типизированными блоками
Код блока выполняется если не было поймано исключений
Будет исполнено в любом случае возможно после соответствующего
блока или
Совместное использование и стало возможно только начиная с Информация о текущем исключении всегда доступна через Кроме значения исключения также сохраняет состояние стека вплоть до точки возбуждения исключения так называемый
В отличие от компилируемых языков программирования в использование исключения не приводит к значительным накладным расходам а зачастую даже позволяет ускорить исполнение программ и очень широко используется Исключения согласуются с философией й пункт дзена Ошибки никогда не должны умалчиваться и являются одним из средств поддержки утиной типизации
Иногда вместо явной обработки исключений удобнее использовать блок доступен начиная с
Итераторы
В программах на широко используются итераторы Цикл может работать как с последовательностью так и с итератором Большинство коллекций предоставляют итераторы итераторы могут также определяться пользователем для собственных объектов Модуль стандартной библиотеки содержит средства работы с итераторами
Генераторы
Одной из интересных возможностей языка являются генераторы функции сохраняющие внутреннее состояние значения локальных переменных и текущую инструкцию см также сопрограммы Генераторы могут использоваться как итераторы для структур данных и для ленивых вычислений
При вызове генератора функция немедленно возвращает объект итератор который хранит текущую точку исполнения и состояние локальных переменных функции При запросе следующего значения посредством метода неявно вызываемого в цикле генератор продолжает исполнение функции от предыдущей точки остановки до следующего оператора или
В появились генераторные выражения выражения дающие в результате генератор Генераторные выражения позволяют сэкономить память там где иначе требовалось бы использовать список с промежуточными результатами
В этом примере суммируются все нечётные числа от до
Начиная с версии поддерживает полноценные сопроцедуры теперь в генератор можно передавать значения с помощью метода и возбуждать в его контексте исключения с помощью метода
Также поддерживает вложенные генераторы Например для создания двумерного массива нужно разместить генератор списка являющегося строкой внутри генератора всех строк
Управление контекстом выполнения
В появились средства для управления контекстом выполнения блока кода оператор и модуль См пример
Оператор может применяться в тех случаях когда до и после некоторых действий должны обязательно выполняться некоторые другие действия независимо от возбуждённых в блоке исключений или операторов файлы должны быть закрыты ресурсы освобождены перенаправление стандартного ввода вывода закончено и т п Оператор улучшает читаемость кода а значит помогает предотвращать ошибки
Декораторы
Не следует путать с одноимённым шаблоном проектирования
Этот раздел статьи ещё не написан Здесь может располагаться отдельный раздел Помогите Википедии написав его февраля
Декораторы функций вызываемые объекты которые принимают другую функцию в качестве аргумента Декораторы функций могут производить операции с функцией и возвращают либо саму функцию либо другую заменяющую её функцию или вызываемый объект То есть если в коде ранее был прописан декоратор названный то следующий код
эквивалентен этому
Это позволяет сократить использование кода
Пример использования декоратора функции
Существуют декораторы классов
Регулярные выражения
Формат регулярных выражений унаследован из с некоторыми отличиями Для их использования требуется импортировать модуль являющийся частью стандартной библиотеки
Стандартная библиотека
поставляется с батарейками в комплекте Такую метафору использовали разработчики чтобы подчеркнуть богатую стандартную библиотеку языка
Богатая стандартная библиотека является одной из привлекательных сторон Здесь имеются средства для работы со многими сетевыми протоколами и форматами Интернета например модули для написания серверов и клиентов для разбора и создания почтовых сообщений для работы с и т п Набор модулей для работы с операционной системой позволяет писать кросс платформенные приложения Существуют модули для работы с регулярными выражениями текстовыми кодировками мультимедийными форматами криптографическими протоколами архивами сериализации данных поддержка юнит тестирования и др
Если модулей стандартной библиотеки не хватает то есть возможность использовать другие каналы получения библиотек Одним из каналов распространения и обновления пакетов для является англ
Сторонние библиотеки
Основная статья Сторонние библиотеки
Здесь перечислены самые популярные библиотеки
Искусственный интеллект
Работа с базами данных Библиотеки для работы с базами данных
Математические вычисления
Веб вычисления
Создание игр
Примеры программ
В статье Примеры программ на языке Викиверситета собраны примеры небольших программ демонстрирующих некоторые возможности языка и его стандартной библиотеки
Программа может быть написана одной строкой
Вычисление факториала числа
Факториал отрицательного числа
Реализация с помощью рекурсии
Факториал отрицательного числа
Профилирование и оптимизация кода
В стандартной библиотеке имеется профайлер модуль который можно использовать для сбора статистики о времени работы отдельных функций Для решения вопроса о том какой вариант кода работает быстрее можно использовать модуль Производимые в следующей программе измерения позволяют выяснить какой из вариантов конкатенации строк более эффективен
А инкрементальные конкатенации в цикле
Б через промежуточный список и метод
В списковое выражение и метод
Г генераторное выражение и метод
Как и в любом языке программирования в имеются свои приёмы оптимизации кода Оптимизировать код можно исходя из различных часто конкурирующих друг с другом критериев увеличение быстродействия уменьшение объёма требуемой оперативной памяти компактность исходного кода и т д Чаще всего программы оптимизируют по времени исполнения
Здесь есть несколько очевидных для опытных программистов правил
Не нужно оптимизировать программу если скорость её выполнения достаточна
Используемый алгоритм имеет определённую временную сложность поэтому перед оптимизацией кода программы стоит сначала пересмотреть алгоритм
Стоит использовать готовые и отлаженные функции и модули даже если для этого нужно немного обработать данные Например в есть встроенная функция
Профилирование поможет выяснить узкие места Оптимизацию нужно начинать с них
имеет следующие особенности и связанные с ними правила оптимизации
Вызов функций является достаточно дорогостоящей операцией поэтому внутри вложенных циклов нужно стараться избегать вызова функций или например переносить цикл в функции Функция обрабатывающая последовательность эффективнее чем обработка той же последовательности в цикле вызовом функции
Старайтесь вынести из глубоко вложенного цикла всё что можно вычислить во внешних циклах Доступ к локальным переменным более быстрый чем к глобальным или чем доступ к полям
Оптимизатор может помочь ускорить работу модуля программы при условии что модуль не использует динамических свойств языка
В случае если модуль проводит массированную обработку данных и оптимизация алгоритма и кода не помогает можно переписать критические участки скажем на языке Си или
Инструмент под названием поможет проанализировать исходный код на и выдать рекомендации по найденным проблемам например неиспользуемые имена изменение сигнатуры метода при его перегрузке и т п В ходе такого статического анализа исходного кода могут быть выявлены и ошибки призван решать близкие задачи но имеет уклон в сторону проверки стиля кода поиска кода с запашком
Сравнение с другими языками
Выбор языка обычно зависит от решаемых задач особенностей языков и наличия библиотек требуемых для решения задачи Одна и та же задача написанная на разных языках может сильно разниться по эффективности исполнения в том числе различия могут быть и при исполнении в разных операционных системах или при использовании разных компиляторов В общем случае языки можно поделить на интерпретируемые скриптовые компилируемые в промежуточное представление и компилируемые что влияет на производительность и потребление памяти принято относить к интерпретируемым Также отдельные языки могут иметь свои сильные стороны в случае выделяется лёгкость в написании программ
и
сравнивается с с точки зрения лаконичности простоты и гибкости Можно сравнить программы записанные на каждом из языков
Сравнение программ
Касательно ООП в в отличие от и отсутствуют модификаторы доступа к полям и методам класса атрибуты и поля у объектов могут создаваться на лету в ходе исполнения программы а все методы являются виртуальными По сравнению с позволяет также перегружать операторы что даёт возможность использовать выражения близкие к естественным В совокупности подход к ООП в упрощает программирование делает код более понятным и одновременно добавляет гибкости языку С другой стороны скорость выполнения кода на как и других интерпретируемых языков значительно ниже чем скорость выполнения аналогичного кода на и обычно ожидается ниже чем в Код на получается производительнее при этом занимает больше строк Согласно исследованиям алгоритмов применяемых в биоинформатике показал себя более гибким чем а оказалась компромиссным решением между производительностью и гибкостью
В и все объекты создаются в куче в то время как позволяет создавать объекты как в куче так и на стеке в зависимости от используемого синтаксиса На производительность также влияет способ доступа к данным в памяти В и доступ к данным происходит по постоянным смещениям в памяти в то время как в через хеш таблицы Использование указателей в может быть довольно сложным для понимания среди новичков и овладение навыками правильного использования указателей может занять некоторое время
Этот раздел слишком короткий Пожалуйста улучшите и дополните его
и кардинально различающиеся языки тем не менее они часто сравниваются один с другим из за общей ниши бэкэнда веб приложений По выражению Джейсона Кинкэйда объединяет производительность и безопасность компилируемых языков таких как со скоростью разработки на динамических языках таких как В какой то мере это действительно так изначально разработан как строго статически типизированный компилируемый язык поддерживающий максимум возможностей динамических языков при котором ещё можно обеспечить эффективную компиляцию и сохранить производительность компилируемых программ
Общими для обоих языков является использование автоматического управления памятью наличие встроенных динамических коллекций массивов и словарей поддержка срезов развитый механизм модулей простой и минималистичный синтаксис Различий гораздо больше и не всегда можно однозначно указать в пользу какого из языков они говорят
Динамические возможности
Если является полностью динамическим языком и практически любые элементы программы могут меняться во время исполнения включая конструирование на лету новых типов и модификацию существующих то статический язык с достаточно ограниченными возможностями рефлексии работающей только в отношении созданных при разработке типов данных В некоторой мере заменой динамических возможностей в является кодогенерация обеспечиваемая простотой синтаксиса и наличием необходимых инструментов и системных библиотек Также в добавили поддержку средств обобщённого программирования
Оба языка являются интерпретируемыми компилируются в промежуточное представление которое затем отправляется на исполнение В случае генерируется промежуточный байт код а компилятор генерирует синтаксическое дерево Управление памятью в обоих языках автоматическое а сами языки используются как скриптовые и хорошо подходят для написания веб приложений Подход в написания кода предполагает лучшее понимание листинга программы в ущерб производительности тогда как в больше свободы в синтаксисе что может привести к тому что программы на становятся нечитабельны для программистов не работающих с данным языком
и
Этот раздел статьи ещё не написан Здесь может располагаться отдельный раздел Помогите Википедии написав его февраля и используются в обработке данных и в обучении студентов основам математики и статистики является языком для выполнения статистических расчётов в то время как может считаться языком программирования наряду с
Языки на которые повлиял
как весьма популярный язык программирования повлиял на следующие языки
имеет синтаксис вдохновлённый
заимствовал итераторы и генераторы из
при сильнейших идеологических различиях заимствовал у динамических языков таких как встроенные словари динамические массивы срезы
был создан с мотивацией привнести философию на
была задумана как такая же пригодная для общего программирования как и
использует систему отступов и аналогичный синтаксис
Юкихиро Мацумото создатель языка сказал Я хотел скриптовый язык который был бы более мощным чем и более объектно ориентированным чем Вот почему я решил создать свой собственный язык
во время разработки брал идеи структуры языка из а также из
Критика
Низкое быстродействие
Классический имеет общий со многими другими интерпретируемыми языками недостаток сравнительно невысокую скорость выполнения программ В некоторой степени ситуацию улучшает кеширование байт кода расширения и до версии которое позволяет интерпретатору не тратить время на синтаксический разбор текста модулей при каждом запуске
Существуют реализации языка вводящие высокопроизводительные виртуальные машины в качестве бэкенда компилятора Примерами таких реализаций может служить базирующийся на более ранней инициативой является проект Ожидается что использование виртуальной машины типа приведёт к тем же результатам что и использование аналогичных подходов для реализаций языка где низкая вычислительная производительность в основном преодолена Однако нельзя забывать что динамический характер делает неизбежными дополнительные накладные расходы при исполнении программ что ограничивает производительность систем независимо от применяемых технологий Вследствие этого для написания критических участков кода используются низкоуровневые языки интеграция с которыми обеспечивается множеством программ и библиотек
Тем не менее портирован на некоторые относительно малопроизводительные платформы
Глобальная блокировка интерпретатора
Схематичное изображение работы потоков под Зелёный поток удерживающий красные блокированные потоки
Основная статья
Интерпретатор в а также и использует потоко небезопасные данные во избежание разрушения которых при совместной модификации из разных потоков применяется глобальная блокировка интерпретатора в ходе исполнения кода поток интерпретатора блокирует выполняет в течение фиксированного времени по умолчанию миллисекунд К некоторое количество инструкций после чего освобождает блокировку и приостанавливается давая возможность работать другим потокам также освобождается во время ввода вывода изменения и проверки состояния синхронизирующих примитивов при исполнении кода расширений не обращающихся к данным интерпретатора например Таким образом в каждый момент времени в одном процессе интерпретатора может исполняться только один поток кода на независимо от числа доступных процессорных ядер
Потери производительности от зависят от характера программ и архитектуры системы Большинство программ является однопоточными либо запускает всего несколько потоков из которых часть в каждый конкретный момент простаивает в ожидании Персональные компьютеры обычно имеют небольшое количество процессорных ядер которые загружены параллельно исполняющимися в системе процессами так что реальные потери производительности на персональных компьютерах из за невелики Но в серверных приложениях может быть удобно использовать десятки и сотни а то и больше параллельных потоков например в системах массового обслуживания где каждый поток обрабатывает данные для отдельного пользовательского запроса а серверы на конец х годов нередко имеют десятки и даже сотни процессорных ядер то есть технически могут обеспечить этим потокам физически одновременное исполнение в таких условиях может приводить к действительно значительному снижению общей производительности так как лишает программу возможности полноценно использовать ресурсы многоядерных систем
Гвидо ван Россум говорил что не так уж и плох и он будет в до тех пор пока кто то другой не представит реализацию без с которой бы однопоточные скрипты работали так же быстро
В задачи разработки входит работа по оптимизации Планируется отказ от есть черновой вариант но на данный момент есть следующие варианты избавления от
Вариант интерпретатора с синхронизацией доступа к отдельным объектам вместо глобальной блокировки из за частых захватов освобождений блокировок оказался слишком медленным
Реализация потоков через процессы ОС например модуль
Отказ от совместного использования изменяемых данных и вызовов внешнего кода При этом данные дублируются в потоках и их синхронизация если таковая нужна лежит на программисте
Библиотеки обеспечивающие собственную организацию поддержки потоков
Есть черновой по отказу от в
Радикальным вариантом решения проблемы может быть переход на и работающие на виртуальных машинах и эти реализации вообще не используют
Синтаксис и семантика
Несмотря на то что одним из заявленных принципов дизайна является принцип наименьшего удивления критики отмечают целый ряд архитектурных решений которые могут вводить в заблуждение или вызывать недоумение у программистов привыкших к другим распространённым языкам В их числе
Отличие в принципе работы оператора присвоения по сравнению со статически типизированными языками В при присвоении значения копируется ссылка на объект а не значение При работе с простыми неизменяемыми типами возникает ощущение изменения значения переменной при присваивании ей значения однако фактически присваивается ссылка на другое значение например при увеличении значения переменной типа на меняется ссылка а не увеличивается значение по ссылке Однако при работе с изменяемыми типами их содержимое можно менять по ссылке поэтому при присвоении одной переменной ссылки на другую и последующем изменении значения в одной из двух переменных оно изменится в обеих переменных что хорошо заметно при работе со списками При этом кортежи хоть и являются неизменяемыми но могут хранить ссылки на изменяемые объекты поэтому по факту кортежи тоже можно менять
Отличие в поведении на некоторых типах сокращённых операторов таких как и их развёрнутой записи хотя в большинстве языков сокращённый вариант это просто краткая запись полного и семантически они абсолютно эквивалентны Пример с использованием
Аналогичный пример с использованием
Жёсткая трактовка лексической области видимости подобная используемой в даже если переменная получает значение в последней строке функции её областью видимости является вся функция
Путаница между полями класса и полями объекта текущее значение поля класса инициализирует одноимённое поле объекта но не при создании объекта а при первой записи значения в данное поле
выводится исходное значение поля КЛАССА
изменение поля КЛАССА
выводится значение поля КЛАССА
изменяется поле ОБЪЕКТА и фиксируется его значение
изменение поля КЛАССА которое уже не отразится на объекте
выводится поле ОБЪЕКТА
Скрипт выведет
В примере выше три раза выводится поле объекта класса При этом пока не выполнена запись в это поле выводится текущее значение поля класса и в третий раз значение поля объекта Такое сохранение связи между полем объекта и класса до первой перезаписи может стать причиной неожиданного эффекта если в программе меняется значение поля класса то все объекты одноимённые поля которых ещё не перезаписаны окажутся неявно изменены
Интуитивно трудно предсказуемое поведение параметров со значением объектом по умолчанию Если в качестве инициализатора для параметра по умолчанию указать конструктор объекта это приведёт к созданию статического объекта ссылка на который и будет передаваться по умолчанию в каждый вызов Это может повлечь трудно уловимые ошибки
Невозможность модификации встроенных классов
Этот раздел слишком короткий Пожалуйста улучшите и дополните его
По сравнению с и некоторыми другими языками в отсутствует возможность модифицировать встроенные классы такие как и другие
Реализации
Основная статья
является основной реализацией языка Он написан на языке Си и является переносимым на разные платформы В основе управления памятью лежит использование комбинации счётчиков ссылок и сборщика мусора ответственного за поиск циклических захватов ссылок Хотя язык считается интерпретируемым на самом деле он компилируется в промежуточный высокоуровневый байт код который затем исполняется через стековую виртуальную машину Например вызов функции может быть представлен в следующем виде
Имена в языке имеют позднее связывание в результате чего можно писать обращения к переменным методам и атрибутам которых ещё нет но они должны быть объявлены на момент исполнения кода использующего их Каждый объект в имеет словарь представленный хеш таблицей через который происходит сопоставление названий атрибутов их значениям Глобальные переменные также сопоставляются через словарь Одно обращение к методу или атрибуту может сопровождаться поочерёдным поиском в нескольких словарях
Основная статья
реализация написанная на подмножество имеющее намного меньше динамических возможностей Позволяет легко проверять новые возможности В кроме стандартного включены возможности модификация на лету и многое другое В проект интегрированы возможности анализа кода и трансляция в другие языки и байт коды виртуальных машин Си с версии Начиная с возможна полностью автоматическая трансляция в Си в результате чего достигается скорость приемлемая для использования в раза ниже чем при отключённом для версии По умолчанию поставляется со встроенным компилятором с помощью которого он способен работать намного быстрее чем
Этот раздел статьи ещё не написан Здесь может располагаться отдельный раздел Помогите Википедии написав его февраля Основная статья
реализация компилирующая код на в байт код который может быть выполнен Также может использоваться для импорта класса исходный код которого был написан на в качестве модуля для
Другие реализации
Существуют также другие реализации
компилятор на основе с поддержкой
реализация языка для смартфонов фирмы на платформе Не поддерживается
для и Компилирует программы в таким образом предоставляя полную интеграцию с системой
также написанная на Си реализация Это не полноценная реализация а патчи к Предоставляет расширенные возможности многопоточного программирования и значительно большую глубину рекурсии
ещё одна реализация для В отличие от эта реализация не компилирует код в а только предоставляет интерпретатор написанный на Позволяет использовать сборки из кода
реализация использующая в качестве среды исполнения Позволяет прозрачно использовать библиотеки
минималистическая версия Часть возможностей не реализована
реализация для встроенных систем с малым объёмом оперативной памяти
реализация языка на клиентском позволяющая писать браузерные скрипты на
реализация для Проект всё ещё на стадии тестирования однако на уже портированы некоторые самые необходимые библиотеки Позволяет и работать в интерактивном режиме Существует также
Специализированные подмножества расширения
На основе было создано несколько специализированных подмножеств языка в основном предназначенных для статической компиляции в машинный код Некоторые из них перечислены ниже
созданная в рамках проекта сильно ограниченная реализация без динамизма времени исполнения и некоторых других возможностей Код на можно компилировать во множество других языков платформ На написан интерпретатор
ограниченная реализация но несколько меньше чем расширен возможностями статической типизации типами из языка и позволяет свободно смешивать типизированный и не типизированный код Предназначен для написания модулей расширений компилируется в код на языке
Позволяет транслировать весь код в код Си или в исполняемые файлы
Инструменты поддержки программирования
Интерактивный режим
Подобно и может использоваться в интерактивном режиме при котором введённые с клавиатуры операторы сразу же выполняются а результат выводится на экран Этот режим удобен как при изучении языка так и в процессе профессиональной разработки для быстрого тестирования отдельных фрагментов кода так как обеспечивает немедленную обратную связь Также он позволяет использовать интерпретатор в качестве калькулятора с большим набором функций
Эталонная реализация имеет встроенный интерактивный интерпретатор работающий в режиме текстового терминала и позволяющий выполнять все основные операции В интерактивном режиме доступен отладчик и система помощи вызывается по работающая для всех модулей классов и функций которые содержат строки документации
импорт математических функций
помощь по функции
выходящая под лицензией кросс платформенная интерактивная оболочка предоставляющая расширенную интроспекцию и дополнительные команды В частности позволяет передавать исполняемому коду на результаты выполнения команд системной командной оболочки Поддерживает подсветку кода и автоматическое дополнение
расширение стандартной командной оболочки с помощью ряда дополнительных модулей Реализует подсветку синтаксиса автоматическое дополнение кода с предложением вариантов автоматическое выравнивание интеграция с сохранение ввода в файл восстановление удалённой строки предложение параметров для функций
Почти все для поддерживают для быстрого тестирования
Существует несколько специализированных для разработки на
полнофункциональный редактор и написанный на Он базируется на кросс платформенном фреймворке в качестве компонента редактирования используется предоставляет возможности ведения проектов отладки профилирования рефакторинга кода взаимодействия с популярными системами управления версиями такими как и Расширяется через механизм плагинов Репозиторий плагинов доступен прямо из среды разработки Распространяется бесплатно лицензия
полнофункциональная для от доступна на платформах и существует в бесплатном и платном вариантах
линейка от американской фирмы включает три варианта из которых первые два бесплатны последний платный Версия обладает всеми необходимыми средствами для профессиональной разработки включая поддержку проектов работу с системами управления версиями расширенные возможности навигации по коду и анализа кода рефакторинг поддержка использования Бесплатные версии предоставляют меньше функций и не выходят за пределы возможностей доступных в других бесплатных для
для под лицензией бесплатная доступна на платформах и Особенностью является то что ориентирована на в ней удобно работать с библиотеками типа поставляется в комплекте с менеджером пакетов В целом обладает качествами стандартной имеет редактор с подсветкой синтаксиса автоматическое дополнение кода обозреватель документации
многоплатформенная бесплатная выпускается под лицензией поддерживается Институтом информатики Тартуского университета в Эстонии Позиционируется как для новичков полностью включая интерпретатор ставится из коробки пользователем без административных прав сразу после установки может использоваться без дополнительных настроек Предназначена для обучения имеет улучшенную визуализацию порядка вычисления выражений и вызова функций динамическую подсветку синтаксических ошибок простой менеджер пакетов Для профессионального применения возможностей недостаточно например нет поддержки проектов и интеграции с системами управления версиями
Встроенный в Очень простой и малофункциональный
Помимо этого существуют плагины для поддержки программирования на для универсальных и а также имеется поддержка подсветки синтаксиса авто дополнения кода и подключения средств отладки и запуска приложений для целого ряда распространённых текстовых редакторов
Применение
стабильный и распространённый язык Он используется во многих проектах и в различных качествах как основной язык программирования или для создания расширений и интеграции приложений На реализовано большое количество проектов также он активно используется для создания прототипов будущих программ
является лёгким в изучении языком и часто изучается как первый язык в том числе используется при обучении детей программированию Как первый язык он хорошо подходит поскольку программы на нём близки к естественному языку на котором люди привыкли думать а для написания корректной программы требуется минимальное количество ключевых слов В других же языках таких как существует большое количество различных синтаксических конструкций и элементов языка которым приходится уделять внимание вместо изучения алгоритмов
Являясь приложением с открытым исходным кодом интерпретатор используется по всему миру и поставляется в составе операционных систем на базе а также в компьютерах от фирмы популярен среди индивидуальных разработчиков но также используется крупными компаниями в достаточно серьёзных продуктах ориентированных на получение прибыли На написан и В также активно применяется а из за сложностей динамической типизации и огромного количества кода компания перешла к статической типизации с помощью открытого проекта Также активно используется в и Многие компании используют для тестирования аппаратного обеспечения среди этих компаний значатся и и используют его при создании анимационных фильмов
Язык активно используется компанией в её поисковой системе а в значительной степени написан с использованием Кроме того спонсирует разработку с года и поддержку основной системы распространения пакетов для
Сильными сторонами являются его модульность и возможность интегрироваться с другими языками программирования в том числе в составе сложных комплексных приложений и систем Сочетание простоты и лаконичности с большим количеством возможностей делает удобным в качестве скриптового языка источник не указан дней Многие проекты предоставляют прикладной интерфейс программирования на для написания скриптов например среды моделирования и а также свободная геоинформационная система Некоторые проекты реализуют базовую часть на более производительных языках программирования а для упрощения работы предоставляют полноценный интерфейс прикладного программирования на источник не указан дней Так движок свободного видеоредактора реализован в виде библиотеки написанной на с использованием библиотек на Си а все возможности полностью покрыты прикладным интерфейсом программирования значимость факта Агентство национальной безопасности США использует для анализа данных а использует его при выполнении научных задач Из инструментов используемых в можно отметить свободный графический симулятор сети который также хорошо зарекомендовал себя в корпоративной среде и используется в технологических компаниях например в На написана также свободная популярная программа нарезки моделей для печати на принтерах
с пакетами и активно используется как универсальная среда для научных расчётов в качестве замены распространённым специализированным коммерческим пакетам таким как предоставляя аналогичную функциональность и более низкий порог вхождения По большей части на написана также графическая программа англ рус позволяющая создавать качественные графики готовые для размещения в научных публикациях значимость факта Библиотека популярный инструмент для астрономических расчётов значимость факта
Также является лучшим языком программирования по использованию в ИИ сфере
Также подходит для выполнения нестандартных или сложных задач в системах сборки проектов что обусловлено отсутствием необходимости предварительной компиляции исходных файлов В проекте он используется для генерации исходного кода объектов для классов языка значимость факта
Интерпретатор может использоваться в качестве мощной командной оболочки и скриптового языка для написания командных файлов ОС Лёгкость обращения из скриптов к внешним программам и наличие библиотек дающих доступ к управлению системой делают удобным инструментом для системного администрирования Он широко используется для этой цели на платформе обычно поставляется с системой во многих дистрибутивах инсталляторы и визуальный интерфейс системных утилит написаны именно на Используется он и в администрировании других систем в частности в и Кроссплатформенность самого языка и библиотек делает его привлекательным для унифицированной автоматизации задач системного администрирования в гетерогенных средах где совместно применяются компьютеры с операционными системами различных типов
Будучи языком общего назначения применим почти во всех сферах деятельности Фактически используется практически любой солидной компанией тем или иным образом как для выполнения текущих задач так и в тестировании администрировании или в разработке программных продуктов
Примечания
Комментарии
Недоступно непосредственно по имени типа
Значение в секундах можно получить с помощью команды и изменить во время работы программы с помощью
Источники
англ
неопр Дата обращения марта Архивировано октября года
англ Дата обращения января Архивировано октября года
неопр декабря Дата обращения марта Архивировано из оригинала мая года
неопр Дата обращения ноября Архивировано июня года
неопр Дата обращения февраля Архивировано октября года
неопр Дата обращения ноября Архивировано ноября года
неопр Дата обращения июля Архивировано августа года
неопр Дата обращения февраля Архивировано октября года
неопр мая Дата обращения февраля Архивировано июня года
неопр сентября Дата обращения февраля Архивировано июня года
неопр Дата обращения июля Архивировано июня года
англ мая Дата обращения мая Архивировано мая года
Мария Нефёдова Создатели языков программирования Они такие разные но кодинг их объединяет Хакер неопр Дата обращения декабря Архивировано июля года
Прохоренок Н Дронов В Введение Самое необходимое е изд БХВ Петербург С с Архивировано февраля года
англ Архивировано февраля года
англ февраля Дата обращения марта Архивировано марта года
англ Дата обращения февраля Архивировано февраля года
англ августа Дата обращения февраля Архивировано декабря года
англ апреля Дата обращения апреля Архивировано февраля года
неопр Дата обращения октября Архивировано мая года
англ Архивировано февраля года
англ Архивировано ноября года
англ Дата обращения февраля Архивировано февраля года
англ Архивировано апреля года
англ Архивировано февраля года
англ апреля Дата обращения февраля Архивировано февраля года
англ Дата обращения февраля Архивировано февраля года
неопр Дата обращения августа Архивировано августа года
англ июля Дата обращения февраля Архивировано ноября года
англ Дата обращения мая Архивировано декабря года
англ Архивировано февраля года
англ Архивировано февраля года
англ марта Дата обращения марта Архивировано февраля года
англ Архивировано февраля года
англ Архивировано июля года
англ Архивировано июня года
англ Архивировано февраля года
англ Архивировано марта года
Архивированная копия неопр Дата обращения июня Архивировано из оригинала февраля года
неопр Дата обращения июня Архивировано октября года
неопр Дата обращения января Архивировано января года
неопр Дата обращения июня Архивировано июня года
неопр Дата обращения января Архивировано мая года
неопр Дата обращения января Архивировано июня года
англ Дата обращения сентября Архивировано января года
неопр Дата обращения декабря Архивировано ноября года
англ Дата обращения июня Архивировано октября года
неопр Дата обращения октября Архивировано ноября года
неопр января Дата обращения февраля Архивировано июня года
неопр Дата обращения ноября Архивировано июня года
неопр Дата обращения сентября Архивировано июля года
Бейдер Дэн Чистый Тонкости программирования для профи Издательский дом Питер С с Архивировано апреля года
неопр января Дата обращения марта Архивировано сентября года
неопр августа Дата обращения ноября Архивировано декабря года
Архивная копия от февраля на Источник неопр Дата обращения декабря Архивировано февраля года
неопр января Архивировано из оригинала января года
С с Архивировано июня года
неопр Дата обращения декабря Архивировано из оригинала мая года
неопр Дата обращения декабря Архивировано января года
англ Дата обращения декабря Архивировано января года
англ Дата обращения декабря Архивировано января года
англ Дата обращения июня Архивировано октября года
англ Дата обращения января Архивировано ноября года
англ Дата обращения октября
англ
Рамальо
неопр Дата обращения июня Архивировано июня года
неопр марта Дата обращения сентября Архивировано мая года
неопр Дата обращения октября Архивировано июня года
Рамальо
англ Дата обращения марта Архивировано января года
неопр октября Архивировано января года
целостность больших проектов на строится на двух вещах тесты и строка неопр Дата обращения октября Архивировано октября года
англ Университет Де Поля Дата обращения февраля Архивировано апреля года
неопр Дата обращения сентября Архивировано ноября года
неопр Дата обращения сентября Архивировано июня года
неопр Дата обращения июля Архивировано июня года
англ октября Дата обращения марта Архивировано марта года
англ Дата обращения марта Архивировано марта года
англ Архивировано июля года
англ Дата обращения марта Архивировано марта года
англ сентября Дата обращения февраля Архивировано февраля года
англ Дата обращения февраля Архивировано февраля года
Рамальо
англ
Рамальо
Рамальо
Патрик О Брайен Руководство по интроспекции на Архивировано июля года
Рамальо
Рамальо
неопр Дата обращения мая Архивировано июля года
Архивировано из оригинала мая Дата обращения апреля Проверьте значение даты справка
неопр Дата обращения октября Архивировано июня года
Индекс пакета рус Дата обращения октября Архивировано июня года
неопр Дата обращения октября Архивировано октября года
неопр Дата обращения февраля Архивировано февраля года
неопр Дата обращения февраля Архивировано февраля года
неопр Дата обращения октября Архивировано октября года
англ Архивировано марта года
англ Архивировано марта года
Архивировано марта года
англ Дата обращения марта Архивировано марта года
англ Архивировано марта года
Архивировано из оригинала января Дата обращения января Указан более чем один параметр справка
англ Дата обращения мая Архивировано мая года
англ Архивировано апреля года
неопр Дата обращения ноября Архивировано из оригинала октября года
неопр августа Дата обращения июня Архивировано из оригинала апреля года
неопр февраль Дата обращения июня Архивировано мая года
неопр января Дата обращения февраля Архивировано октября года
неопр Дата обращения декабря Архивировано апреля года
неопр июня Дата обращения июня Архивировано декабря года
неопр Дата обращения июля Архивировано января года
англ Дата обращения октября Архивировано мая года
англ Дата обращения октября Архивировано июня года
Яворски Зиаде
неопр Документация Дата обращения октября Архивировано октября года
неопр Документация Дата обращения октября Архивировано октября года
неопр мая Дата обращения марта Архивировано ноября года
неопр сентября Дата обращения марта Архивировано июня года
неопр Дата обращения декабря Архивировано июня года
неопр Дата обращения октября Архивировано октября года
неопр Дата обращения августа Архивировано ноября года
неопр Дата обращения октября Архивировано октября года
неопр Дата обращения апреля Архивировано мая года
неопр Архивировано из оригинала августа года
С с Архивировано января года
англ октября Дата обращения января Архивировано января года
неопр Дата обращения февраля Архивировано ноября года
неопр Дата обращения октября Архивировано июня года
рус Дата обращения марта Архивировано января года
Получено с помощью
К Рейт Т Шлюссер
неопр Архивировано августа года
неопр Дата обращения июля Архивировано августа года
неопр Дата обращения февраля Архивировано февраля года
неопр Дата обращения августа Архивировано сентября года
неопр Дата обращения июня Архивировано июня года
Сайт проекта неопр Дата обращения ноября Архивировано октября года
Сайт проекта неопр Дата обращения февраля Архивировано февраля года
неопр Дата обращения июля Архивировано из оригинала июля года
неопр Дата обращения июля Архивировано из оригинала сентября года
неопр Дата обращения июля Архивировано августа года
неопр Дата обращения октября Архивировано сентября года
Архивированная копия неопр Дата обращения июня Архивировано из оригинала августа года
неопр Дата обращения февраля Архивировано мая года
неопр Дата обращения октября Архивировано июня года
англ Дата обращения октября Архивировано октября года
англ Дата обращения октября Архивировано октября года
англ Дата обращения октября Архивировано октября года
амер англ Дата обращения октября Архивировано октября года
Васильев Денис Алексеевич Методические особенности изучения языка школьниками Символ науки Архивировано июля года
англ Архивировано апреля года
англ июня Дата обращения октября Архивировано июня года
англ Дата обращения октября Архивировано февраля года
англ сентября Дата обращения сентября Архивировано сентября года
неопр Дата обращения января Архивировано февраля года
неопр Дата обращения января Архивировано июня года
неопр Архивировано января года статья в
Архивировано из оригинала февраля Дата обращения апреля Проверьте значение даты справка
Архивировано из оригинала апреля Дата обращения апреля Проверьте значение даты справка
финансирует экосистему Издательство Открытые системы Архивировано из оригинала июня Дата обращения апреля Проверьте значение даты справка
англ Архивировано ноября года
англ Дата обращения сентября Архивировано сентября года
англ Дата обращения сентября Архивировано сентября года
англ Дата обращения сентября Архивировано сентября года
англ марта Дата обращения сентября Архивировано сентября года
амер англ августа Дата обращения сентября Архивировано октября года
неопр Дата обращения сентября Архивировано сентября года
англ января Дата обращения сентября Архивировано августа года
англ Т Архивировано ноября года
англ Дата обращения октября Архивировано октября года
арх октября англ арх ноября
англ арх октября Т вып С
амер англ марта Дата обращения октября Архивировано октября года
неопр Дата обращения февраля Архивировано июня года
Литература
Лучано Рамальо К вершинам мастерства рус пер с англ ДМК Пресс
Кеннет Рейтц Таня Шлюссер Автостопом по рус пер с англ Издательский дом Питер
с
Яворски Михал Зиаде Тарек Лучшие практики и инструменты рус пер с англ Издательский дом Питер
Фёдоров Д Ю Программирование на языке высокого уровня Москва Издательство Юрайт с Высшее образование
Ссылки
Книги в ВикиучебникеТексты в ВикитекеМедиафайлы на Викискладе
Официальный сайт англ
Гвидо ван Россум
Реализации
далее
Другое
Стандартная библиотека
Лицензия
Языки программирования
История
Хронология
Ада
Алгол
Ассемблер
Бейсик
Си
Кобол
Форт
Фортран
Лисп
Оберон
Паскаль
Категория
Списки хронологический
по категориям
Ссылки на внешние ресурсы Тематические сайты
Словари и энциклопедии
Большая датская
Большая китайская
Большая норвежская
В библиографических каталогах
Источник
Категории Языки программирования по алфавитуЯзыки программирования появившиеся в с динамической типизациейЯзыки веб программированияВысокоуровневые языки программированияСкрытые категории Страницы использующие устаревший тег не указан язык Википедия заменить архив Википедия Ошибки даты Википедия Ошибки избыточный параметр Страницы использующие волшебные ссылки использующие волшебные ссылки Статьи с источниками из ВикиданныхПРО ИТ Статьи по алфавитуПРО ИТ Последняя правка в текущем месяцеВикипедия Страницы с модулем с красной ссылкойВикипедия Статьи с ненаписанными разделами с февраля годаВикипедия Статьи с шаблонами недостатков по алфавитуВикипедия Статьи с незавершёнными разделамиВикипедия Статьи без источников не распределённые по типам Википедия Нет источников с марта Статьи с утверждениями без источников более днейВикипедия Статьи с утверждениями без значимостиВикипедия Статьи с неоформленным списком литературыВикипедия Ссылка на Викиучебник непосредственно в статьеВикипедия Ссылка на Викитеку непосредственно в статьеСтатьи со ссылками на ВикискладСтатьи с примерами кода
Навигация
Персональные инструменты
Вы не представились системеОбсуждениеВкладСоздать учётную записьВойти
Пространства имён
СтатьяОбсуждение
русский
Просмотры
ЧитатьПросмотр кодаИстория
Ещё
Поиск
Навигация
Заглавная страницаСодержаниеИзбранные статьиСлучайная статьяТекущие событияПожертвовать
Участие
Сообщить об ошибкеКак править статьиСообществоФорумСвежие правкиНовые страницыСправка
Инструменты
Ссылки сюдаСвязанные правкиСлужебные страницыПостоянная ссылкаСведения о страницеЦитировать страницуПолучить короткий кодЭлемент Викиданных
Печать экспорт
Скачать как для печати
В других проектах
ВикискладМедиавикиВикиучебникВикифункцииВикиновостиВикиверситет
На других языках
Править ссылки
Эта страница в последний раз была отредактирована марта в
Текст доступен по лицензии С указанием авторства С сохранением условий в отдельных случаях могут действовать дополнительные условия
Подробнее см Условия использования
зарегистрированный товарный знак некоммерческой организации Фонд Викимедиа
Политика конфиденциальности
Описание Википедии
Отказ от ответственности
Свяжитесь с нами
Кодекс поведения
Разработчики
Статистика
Заявление о куки
Мобильная версия